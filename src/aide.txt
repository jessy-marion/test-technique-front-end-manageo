 useEffect(() => {
    const initialUserStates = users.map(() => false);
    setUserStates(initialUserStates);
  }, [users]);

  function handleToggleEdit(index) {
    const updatedUserStates = [...userStates];
    updatedUserStates[index] = !updatedUserStates[index];
    setUserStates(updatedUserStates);
  }

  function handleChange(e) {
    if (e.target.name === "last-name") {
      setNom(e.target.value);
    } else if (e.target.name === "first-name") {
      setPrenom(e.target.value);
    } else {
      setMail(e.target.value);
    }
  }

  function handleSubmit(user) {
    const familleIndex = users.findIndex(
      (nFamille) => nFamille.nomdefamille === user.nom
    );
    const personneIndex = users[familleIndex].personnes.findIndex(
      (personne) => personne.prenom === user.prenom
    );

    if (users.filter((el) => el.nomdefamille === nom).length > 0) {
      const arrayCopy = users;
      arrayCopy[familleIndex].personnes[personneIndex] = {
        id: users[familleIndex].personnes[personneIndex].id,
        prenom: prenom,
        nom: nom,
        mail: mail,
      };

      setUsers([...arrayCopy]);
      handleToggleEdit(familleIndex);
    } else {
      if (users[familleIndex].personnes.length === 1) {
        const updatedUsers = users.slice();
        updatedUsers.splice(familleIndex, 1);
        const index = updatedUsers.findIndex(
          (obj) => obj.personnes === user.nom
        );
        setUsers([
          ...updatedUsers,
          {
            nomdefamille: nom,
            personnes: [
              {
                id: users[familleIndex].personnes[personneIndex].id,
                prenom: prenom,
                nom: nom,
                mail: mail,
              },
            ],
          },
        ]);
        console.log(users);
      } else {
      }
    }
  }